#!/usr/bin/env python

import argparse
import sys
from datetime import datetime

import numpy as np
import process
from dateutil.parser import parse


def human_readable_time(seconds):
    minutes = int(seconds / 60) % 60
    hours = int(seconds / 3600) % 24
    days = int(seconds / 86400)
    return f'{days}d {hours}h {minutes}m {seconds%60:.0f}s'


parser = argparse.ArgumentParser(description="test")
parser.add_argument('-f', '--filename', required=True,
                    help="filename to load issues from")
parser.add_argument('--closed-after',
                    help="Limit issues to those closed after the given date. Format: YYYY-MM-DD[Thh:mm:ss]")
parser.add_argument('-l', '--labels',
                    help="Select issues by the given labels. Format: label1,label2,...")
args = parser.parse_args()

labels = args.labels.split(",") if args.labels is not None else None
closed_after = parse(args.closed_after) if args.closed_after else None

issues = process.load_issues(args.filename)

lead_times = [
    process.calculate_lead_time(issue)
    for issue in issues
    if (closed_after is None or process.get_close_time(issue) >= closed_after)
    and (labels is None or process.has_labels(issue, labels))
]

if not lead_times:
    print(f"query returned no issues")
    sys.exit(0)

lead_times = [lead_time for lead_time in lead_times if lead_time is not None]
percentiles = [50, 75, 90, 95, 99]
percentile_values = np.percentile(lead_times, percentiles)
print(
    f"lead time stats from {len(lead_times)} issues\n")

for i, percentile in enumerate(percentiles):
    print(
        f"{percentile}th percentile: {human_readable_time(percentile_values[i])}")
