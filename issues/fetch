#!/usr/bin/env python

import argparse
import json
import os
import sys
from datetime import datetime

import fetch
import numpy as np


def check_required_arg(parser, arg):
    if not arg:
        parser.print_help()
        sys.exit(1)


parser = argparse.ArgumentParser(description="test")
parser.add_argument('-r', '--repositories',
                    help="repositories to fetch issues for (format: org1/repo1[,org2/repo2]...)",
                    default=os.getenv("REPOSITORIES"))
parser.add_argument('--github-token',
                    help="GitHub token used to fetch issues from API",
                    default=os.getenv("GITHUB_TOKEN"))
parser.add_argument('--zenhub-token',
                    help="ZenHub token used to fetch issue events from REST API",
                    default=os.getenv("ZENHUB_TOKEN"))
parser.add_argument('-o', '--output',
                    help="Name of the file to save the commands result in. Default: stdout",
                    default=os.getenv("OUTPUT"))
args = parser.parse_args()


check_required_arg(parser, args.repositories)
check_required_arg(parser, args.github_token)
check_required_arg(parser, args.zenhub_token)

issues = []
for repo in args.repositories.split(","):
    issues.extend(fetch.fetch_issues(repo, "closed", args.github_token, args.zenhub_token))

f = open(args.output, "w") if args.output else sys.__stdout__
json.dump(issues, f)
